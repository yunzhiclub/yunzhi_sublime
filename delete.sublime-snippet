<snippet>
    <content><![CDATA[
/**
 * 重写删除
 * @param    \$options 
 * @return           
 */
public function delete(\$options = array())
{
    // 计算选项信息，判断删除条件是否为空
    \$options = \$this->_parseOptions(\$options);      
    if(empty(\$options['where'])){                  
        \$this->setError("where is empty");
        return false;
    }

    // 查询删除数据列表
    \$lists = \$this->field(\$this->pk)->select(\$options);
    \$map = array();
    foreach (\$lists as \$list)
    {
        \$map[\$this->fk] = \$list[\$this->pk];
        // 删除关联表
        //\$this->MenuPostL->where(\$map)->delete();
        //\$this->DepartmentPostL->where(\$map)->delete();
    }
    return parent::delete(\$options);
}

/**
 * 预删除
 * @param  array \$options 
 * @return bool          
 */
public function prepareDelete(\$options = array())
{
    // 计算选项信息，判断删除条件是否为空
    \$options = \$this->_parseOptions(\$options);      
    if(empty(\$options['where'])){                  
        \$this->setError("where is empty");
        return false;
    }
    
    // 查询预删除数据
    \$lists = \$this->field(\$this->pk)->select(\$options);
    \$map = array();
    foreach (\$lists as \$list)
    {
        \$map[\$this->fk] = \$list[\$this->pk];
        
        // 查询依赖表
        // if (\$this->UserL->where(\$map)->count() > 0)
        // {
        //     \$this->setError("UserL " . \$this->fk ." has datas with " . \$list[$this->pk]);
        //     return false;
        // }
        
        // 预删除关联表 
        // 预删除 菜单岗位表
        // if (\$this->MenuPostL->where(\$map)->prepareDelete() === false)
        // {
        //     \$this->setError("MenuPostL prepareDelete" . \$list[\$this->pk] ." error: " . \$this->MenuPostL->getError());
        //     return false;
        // }
    }
    return true;
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>delete</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.php</scope>
</snippet>
